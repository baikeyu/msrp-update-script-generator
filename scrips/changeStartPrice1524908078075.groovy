import com.daimler.dcp.biz.china.model.DcpSimplePriceModel
import com.daimler.dcp.biz.china.model.DcpVehicleNstModel
import de.hybris.platform.core.model.c2l.CurrencyModel

import java.math.BigDecimal
import java.util.ArrayList
import java.util.List

dcpVehicleNstDao = spring.getBean "dcpVehicleNstDao"
modelService = spring.getBean "modelService"
currencyDao = spring.getBean "currencyDao"

HashMap<String, String> nst2priceMap = new HashMap();
//put all start price here
nst2priceMap.put("46323410-CN7", "1684000");
nst2priceMap.put("46323410-CN8", "1823000");
nst2priceMap.put("46323410-X71", "1682000");
nst2priceMap.put("46323410-X81", "1821000");
nst2priceMap.put("46327210-CN3", "2299800");
nst2priceMap.put("46327210-CN8", "2568800");
nst2priceMap.put("46327410-CN8", "3788800");
nst2priceMap.put("46334810-CN3", "1318000");
nst2priceMap.put("46334810-X31", "1316000");
nst2priceMap.put("20743610-CN6", "713000");
nst2priceMap.put("45344310-CN3", "165000");
nst2priceMap.put("45344310-CN4", "165000");
nst2priceMap.put("45345310-CN5", "205000");
nst2priceMap.put("45345310-CN6", "185000");
nst2priceMap.put("45346210-CN3", "327888");
nst2priceMap.put("11734210-CN8", "247800");
nst2priceMap.put("11734310-CN6", "266800");
nst2priceMap.put("11734310-CN7", "286800");
nst2priceMap.put("11734310-CN8", "272800");
nst2priceMap.put("11734310-CN9", "292800");
nst2priceMap.put("11734610-CN2", "374800");
nst2priceMap.put("11734610-CN8", "375800");
nst2priceMap.put("11734710-CN2", "316800");
nst2priceMap.put("11734710-CN8", "316800");
nst2priceMap.put("11734710-CN9", "324800");
nst2priceMap.put("11734710-X81", "337800");
nst2priceMap.put("11735210-CN2", "592800");
nst2priceMap.put("11735210-CN8", "593800");
nst2priceMap.put("11735210-CN9", "593800");
nst2priceMap.put("11735210-X81", "626800");
nst2priceMap.put("11734210-CN9", "252800");
nst2priceMap.put("11734610-CN9", "383800");
nst2priceMap.put("19037710-CN1", "1408000");
nst2priceMap.put("19037810-CN1", "1674000");
nst2priceMap.put("19037810-CN2", "1698000");
nst2priceMap.put("19037810-CN3", "1952000");
nst2priceMap.put("19037910-CN1", "2269000");
nst2priceMap.put("19037910-CN2", "2288000");
nst2priceMap.put("19037910-X11", "2218000");
nst2priceMap.put("19038010-CN1", "1978000");
nst2priceMap.put("20534210-CN1", "379800");
nst2priceMap.put("20534210-CN2", "379800");
nst2priceMap.put("20534210-CN3", "380800");
nst2priceMap.put("20534310-CN1", "418800");
nst2priceMap.put("20534310-CN2", "419800");
nst2priceMap.put("20534810-CN1", "484800");
nst2priceMap.put("20534810-CN2", "484800");
nst2priceMap.put("20534810-CN3", "489800");
nst2priceMap.put("20538610-CN2", "1019800");
nst2priceMap.put("20538610-CN3", "1019800");
nst2priceMap.put("20538710-CN2", "1268800");
nst2priceMap.put("20538710-CN3", "1268800");
nst2priceMap.put("20733410-CN6", "525800");
nst2priceMap.put("20736510-CN6", "736800");
nst2priceMap.put("21736410-CN2", "1298000");
nst2priceMap.put("21736410-X21", "1357000");
nst2priceMap.put("21737810-CN3", "2478000");
nst2priceMap.put("21738410-CN3", "1981000");
nst2priceMap.put("21833610-CN8", "693000");
nst2priceMap.put("21836210-CN8", "762000");
nst2priceMap.put("21836710-CN8", "980000");
nst2priceMap.put("21839210-CN8", "1763000");
nst2priceMap.put("23834210-CN1", "553800");
nst2priceMap.put("23834210-CN2", "553800");
nst2priceMap.put("23834310-CN1", "578800");
nst2priceMap.put("23834310-CN2", "578800");
nst2priceMap.put("23834810-CN1", "636800");
nst2priceMap.put("23834810-CN2", "636800");
nst2priceMap.put("25334310-CN1", "491800");
nst2priceMap.put("25334310-CN2", "491800");
nst2priceMap.put("25334310-CN3", "493800");
nst2priceMap.put("25334610-CN1", "527800");
nst2priceMap.put("25334610-CN2", "527800");
nst2priceMap.put("25334610-CN3", "530800");
nst2priceMap.put("25334610-X21", "526800");
nst2priceMap.put("25334910-CN1", "632800");
nst2priceMap.put("25334910-CN2", "632800");
nst2priceMap.put("25334910-CN3", "632800");
nst2priceMap.put("25336410-CN1", "722800");
nst2priceMap.put("25336410-CN2", "722800");
nst2priceMap.put("25336410-X11", "799800");
nst2priceMap.put("25336410-X12", "722800");
nst2priceMap.put("25336410-X13", "798800");
nst2priceMap.put("29235610-CN2", "959800");
nst2priceMap.put("29235610-CN3", "959800");
nst2priceMap.put("29235610-CN5", "959800");
nst2priceMap.put("29236210-CN2", "860800");
nst2priceMap.put("29236210-CN3", "860800");
nst2priceMap.put("29236210-CN5", "860800");
nst2priceMap.put("29236410-CN3", "1059800");
nst2priceMap.put("29237110-CN1", "1485800");
nst2priceMap.put("29237110-CN2", "1485800");
nst2priceMap.put("29237410-CN2", "1921800");
nst2priceMap.put("29237410-CN3", "1921800");
nst2priceMap.put("45334310-CN2", "135000");
nst2priceMap.put("45334310-CN3", "124000");
nst2priceMap.put("45334310-CN9", "144888");
nst2priceMap.put("45334310-CNA", "145888");
nst2priceMap.put("45334310-CNC", "135000");
nst2priceMap.put("45334310-CND", "124000");
nst2priceMap.put("45334310-X21", "144888");
nst2priceMap.put("45335310-CN2", "155000");
nst2priceMap.put("45335310-CN3", "175000");
nst2priceMap.put("45335310-CN4", "175000");
nst2priceMap.put("45335310-CN5", "155888");
nst2priceMap.put("45335310-CN6", "155888");
nst2priceMap.put("45335310-CN7", "155000");
nst2priceMap.put("45335310-CNA", "185888");
nst2priceMap.put("45335310-X21", "173888");
nst2priceMap.put("45336210-CN2", "227000");
nst2priceMap.put("45336210-CN3", "297888");
nst2priceMap.put("45336210-CN4", "227000");
nst2priceMap.put("17243410-CN1", "555000");
nst2priceMap.put("17243410-CN2", "590000");
nst2priceMap.put("17243510-CN1", "555000");
nst2priceMap.put("17243510-CN2", "583000");
nst2priceMap.put("17243810-CN1", "683000");
nst2priceMap.put("17243810-CN2", "683000");
nst2priceMap.put("23146610-CN1", "1089000");
nst2priceMap.put("23146610-CN2", "1089000");
nst2priceMap.put("23146610-X21", "1198000");
nst2priceMap.put("17604210-CN7", "233800");
nst2priceMap.put("17604210-CN8", "233800");
nst2priceMap.put("17604310-CN4", "296800");
nst2priceMap.put("17604310-CNA", "254800");
nst2priceMap.put("17604310-CNB", "280800");
nst2priceMap.put("17604310-CND", "254800");
nst2priceMap.put("17604310-CNE", "280800");
nst2priceMap.put("17604310-CNF", "296800");
nst2priceMap.put("17605210-CN6", "493800");
nst2priceMap.put("17605210-CN8", "493800");
nst2priceMap.put("17605210-CN9", "493800");
nst2priceMap.put("17605210-X81", "553800");
nst2priceMap.put("17604410-CN6", "357000");
nst2priceMap.put("17604410-CN9", "357000");
nst2priceMap.put("17604410-CN8", "357000");
nst2priceMap.put("20524010-CN3", "380800");
nst2priceMap.put("20524210-CN1", "416000");
nst2priceMap.put("20524210-CN2", "416000");
nst2priceMap.put("20524210-CN3", "416800");
nst2priceMap.put("20524310-CN1", "485000");
nst2priceMap.put("20524810-CN1", "565800");
nst2priceMap.put("20524310-CN3", "485800");
nst2priceMap.put("24624210-CN2", "240000");
nst2priceMap.put("24624210-CN8", "240000");
nst2priceMap.put("24624210-CN9", "240000");
nst2priceMap.put("24624310-CNA", "259800");
nst2priceMap.put("24624310-CNB", "279800");
nst2priceMap.put("24624310-CNC", "302800");
nst2priceMap.put("24624310-CND", "259800");
nst2priceMap.put("24624310-CNE", "279800");
nst2priceMap.put("24624310-CNF", "302800");
nst2priceMap.put("24624310-CNG", "259800");
nst2priceMap.put("24624310-CNH", "279800");
nst2priceMap.put("24624310-CNI", "302800");
nst2priceMap.put("24624310-XB1", "289800");
nst2priceMap.put("24624310-XE1", "302800");
nst2priceMap.put("24624410-CN2", "364800");
nst2priceMap.put("24624410-CN8", "364800");
nst2priceMap.put("24624410-CN9", "364800");
nst2priceMap.put("22215510-CN1", "1098800");
nst2priceMap.put("22216210-CN8", "930800");
nst2priceMap.put("22216210-CNA", "930800");
nst2priceMap.put("22216210-XA1", "930800");
nst2priceMap.put("22216310-CN3", "1743800");
nst2priceMap.put("22216410-CN1", "1306800");
nst2priceMap.put("22216410-CN2", "1306800");
nst2priceMap.put("22216510-CN3", "1238000");
nst2priceMap.put("22216610-CN1", "1217800");
nst2priceMap.put("22216710-CN3", "1347000");
nst2priceMap.put("22216910-CN1", "1842800");
nst2priceMap.put("22217810-CN3", "2477000");
nst2priceMap.put("22217910-CN3", "2978800");
nst2priceMap.put("22217910-CN5", "2978800");
nst2priceMap.put("22218410-CN3", "1981000");
nst2priceMap.put("22218810-CN1", "2476800");
nst2priceMap.put("25116310-CN3", "593000");
nst2priceMap.put("25116310-CN4", "683000");
nst2priceMap.put("25116610-CN3", "782000");
nst2priceMap.put("16600410-CN2", "761800");
nst2priceMap.put("16600410-CN3", "761800");
nst2priceMap.put("16605610-CN2", "924800");
nst2priceMap.put("16605610-CN3", "924800");
nst2priceMap.put("16606210-CN2", "771800");
nst2priceMap.put("16606210-CN3", "815000");
nst2priceMap.put("16606210-CN7", "771800");
nst2priceMap.put("16606210-CN9", "815000");
nst2priceMap.put("16606310-CN6", "1187800");
nst2priceMap.put("16606310-CN7", "1187800");
nst2priceMap.put("16606410-CN3", "1029800");
nst2priceMap.put("16607410-CN3", "1842800");
nst2priceMap.put("16607410-CN6", "1842800");
nst2priceMap.put("16607510-CN3", "1971800");
nst2priceMap.put("16607510-CN6", "1971800");
nst2priceMap.put("20506410-CN1", "682800");
nst2priceMap.put("20508610-CN3", "989800");
nst2priceMap.put("20508710-CN2", "1238800");
nst2priceMap.put("20508710-CN3", "1238800");
nst2priceMap.put("20508710-X21", "1286800");
nst2priceMap.put("21306410-CN1", "972800");
nst2priceMap.put("21308910-CN1", "1776800");
nst2priceMap.put("45304310-CN2", "145000");
nst2priceMap.put("45304310-CN3", "134000");
nst2priceMap.put("45304310-CN4", "145000");
nst2priceMap.put("45304310-CN5", "134000");
nst2priceMap.put("45305310-CN2", "165000");
nst2priceMap.put("45305310-CN4", "185000");
nst2priceMap.put("45305310-CN9", "165000");
nst2priceMap.put("45306210-CN2", "236000");
nst2priceMap.put("15695210-CN2", "573800");
nst2priceMap.put("15695210-CN3", "574800");
nst2priceMap.put("15695210-CN5", "574800");
nst2priceMap.put("15695210-X31", "628800");
nst2priceMap.put("16682410-CN3", "1066800");
nst2priceMap.put("16685610-CN3", "1148800");
nst2priceMap.put("16685610-CN6", "1331800");
nst2priceMap.put("16685610-CN7", "1072800");
nst2priceMap.put("16685610-CN8", "1148800");
nst2priceMap.put("16685610-CN9", "1331800");
nst2priceMap.put("16685610-CNA", "1151800");
nst2priceMap.put("16685610-CNB", "1335000");
nst2priceMap.put("16686210-CN1", "1019800");
nst2priceMap.put("16686210-CN2", "1022800");
nst2priceMap.put("16686210-X11", "1027800");
nst2priceMap.put("16687110-CN2", "1585000");
nst2priceMap.put("16687110-CN3", "1585000");
nst2priceMap.put("16687110-CN4", "1588000");
nst2priceMap.put("16687510-CN2", "1981800");
nst2priceMap.put("16687510-CN3", "1981800");
nst2priceMap.put("22296410-CN1", "1486800");
nst2priceMap.put("22296410-X12", "1507000");
nst2priceMap.put("22296710-CN3", "1456000");
nst2priceMap.put("22298010-CN1", "3072800");
nst2priceMap.put("22298610-CN1", "2269800");
nst2priceMap.put("25396410-CN1", "692800");
nst2priceMap.put("25396410-CN2", "692800");
nst2priceMap.put("25396410-X11", "768800");
nst2priceMap.put("25396410-X12", "692800");
nst2priceMap.put("25396410-X13", "691800");
nst2priceMap.put("25396410-X14", "768800");
nst2priceMap.put("17604210-CN9", "233800");
nst2priceMap.put("17604310-CN2", "254800");
nst2priceMap.put("17604310-CN3", "280800");
nst2priceMap.put("17604310-CNC", "296800");
nst2priceMap.put("17604310-XB1", "312800");
nst2priceMap.put("19037710-CN2", "1408000");
nst2priceMap.put("20534310-CN4", "418800");
nst2priceMap.put("20538710-X21", "1336800");
nst2priceMap.put("20524010-CN1", "379800");
nst2priceMap.put("20524010-CN2", "379800");
nst2priceMap.put("20524310-CN2", "485000");
nst2priceMap.put("20524810-CN2", "565800");
nst2priceMap.put("20524810-CN3", "565800");
nst2priceMap.put("20508610-CN2", "989800");
nst2priceMap.put("11734210-CN1", "244800");
nst2priceMap.put("11734310-CN3", "264800");
nst2priceMap.put("11734310-CN5", "284800");
nst2priceMap.put("21837610-CN8", "1853000");
nst2priceMap.put("21893610-CN7", "712000");
nst2priceMap.put("21896710-CN7", "980000");
nst2priceMap.put("20746510-CN6", "846000");
nst2priceMap.put("20733610-CN6", "594800");
nst2priceMap.put("20736210-CN6", "687800");
nst2priceMap.put("46323413-CN2", "1783000");
nst2priceMap.put("46323413-CN3", "1684000");
nst2priceMap.put("46327210-X31", "2296800");
nst2priceMap.put("46327210-X81", "2563800");
nst2priceMap.put("46327213-CN1", "2298800");
nst2priceMap.put("46327213-CN2", "2476800");
nst2priceMap.put("46327410-X81", "3783800");
nst2priceMap.put("46327413-CN1", "3788800");
nst2priceMap.put("46334813-CN1", "1318000");
nst2priceMap.put("46334813-CN2", "1294000");
nst2priceMap.put("25334310-X21", "491800");
nst2priceMap.put("29236410-CN2", "1059800");
nst2priceMap.put("29236410-CN6", "1059800");
nst2priceMap.put("29237110-CN3", "1485800");
nst2priceMap.put("29237410-CN5", "1921800");
nst2priceMap.put("16602410-CN2", "850800");
nst2priceMap.put("16602410-CN3", "850800");
nst2priceMap.put("16606410-CN2", "1029800");
nst2priceMap.put("16682410-CN2", "1066800");
nst2priceMap.put("16682410-CN4", "1070800");
nst2priceMap.put("16687510-CN4", "1981800");
nst2priceMap.put("22216210-CN9", "1098800");
nst2priceMap.put("22296410-X11", "1486800");
nst2priceMap.put("22297610-CN3", "2863800");
nst2priceMap.put("22298410-CN2", "2179800");
nst2priceMap.put("45345310-CN3", "185000");
nst2priceMap.put("45345310-CN4", "205000");
nst2priceMap.put("45346210-CN4", "327888");
nst2priceMap.put("45334310-CNB", "138888");
nst2priceMap.put("45336210-CN5", "297888");
nst2priceMap.put("45334310-CN6", "138888");
nst2priceMap.put("45334310-CN7", "139888");
nst2priceMap.put("45335310-X22", "162888");
nst2priceMap.put("45305310-CN3", "185000");
nst2priceMap.put("45306210-CN3", "236000");
nst2priceMap.put("45305310-CN6", "158888");
nst2priceMap.put("20514010-CBI", "323800");
nst2priceMap.put("20514010-CBJ", "323800");
nst2priceMap.put("20514010-CBL", "323800");
nst2priceMap.put("20514010-CBY", "310800");
nst2priceMap.put("20514210-CBI", "350800");
nst2priceMap.put("20514210-CBJ", "350800");
nst2priceMap.put("20514210-CBK", "350800");
nst2priceMap.put("20514210-CBL", "350800");
nst2priceMap.put("20514310-CBI", "396800");
nst2priceMap.put("20514310-CBJ", "396800");
nst2priceMap.put("20514310-CBL", "396800");
nst2priceMap.put("20514810-CBH", "485000");
nst2priceMap.put("21314210-CBA", "433800");
nst2priceMap.put("21314210-CBB", "433800");
nst2priceMap.put("21314210-CBC", "433800");
nst2priceMap.put("21314210-CBD", "433800");
nst2priceMap.put("21314210-CBE", "435800");
nst2priceMap.put("21314210-CBF", "435800");
nst2priceMap.put("21314310-CBB", "456000");
nst2priceMap.put("21314310-CBC", "456000");
nst2priceMap.put("21314310-CBD", "456000");
nst2priceMap.put("21314310-CBE", "458000");
nst2priceMap.put("21314310-CBF", "458000");
nst2priceMap.put("21314810-CBA", "471800");
nst2priceMap.put("21314810-CBB", "471800");
nst2priceMap.put("21314810-CBC", "496800");
nst2priceMap.put("21314810-CBD", "496800");
nst2priceMap.put("21314810-CBH", "471800");
nst2priceMap.put("21314810-CBI", "471800");
nst2priceMap.put("21314810-CBJ", "496800");
nst2priceMap.put("21314810-CBK", "496800");
nst2priceMap.put("21314810-CBL", "475800");
nst2priceMap.put("21314810-CBM", "475800");
nst2priceMap.put("21314810-CBN", "502800");
nst2priceMap.put("21314810-CBO", "502800");
nst2priceMap.put("21316310-CBA", "624800");
nst2priceMap.put("21316310-CBB", "624800");
nst2priceMap.put("21316310-CBC", "624800");
nst2priceMap.put("21316310-CBD", "624800");
nst2priceMap.put("21316310-CBE", "629800");
nst2priceMap.put("21316310-CBF", "629800");
nst2priceMap.put("20504210-CBE", "312800");
nst2priceMap.put("20504210-CBF", "312800");
nst2priceMap.put("20504310-CBE", "386800");
nst2priceMap.put("20504310-CBF", "386800");
nst2priceMap.put("20504810-CBD", "455800");
nst2priceMap.put("20504810-CBE", "455800");
nst2priceMap.put("20504810-CBF", "455800");
nst2priceMap.put("21304210-CBB", "419800");
nst2priceMap.put("21304310-CBA", "443800");
nst2priceMap.put("21304310-CBC", "443800");
nst2priceMap.put("21304810-CBA", "481800");
nst2priceMap.put("21304810-CBC", "481800");
nst2priceMap.put("15694310-CBH", "269800");
nst2priceMap.put("15694310-CBI", "288800");
nst2priceMap.put("15694310-CBJ", "323800");
nst2priceMap.put("15694310-CBK", "269800");
nst2priceMap.put("15694310-CBL", "288800");
nst2priceMap.put("15694610-CBH", "395800");
nst2priceMap.put("15694610-CBI", "395800");
nst2priceMap.put("15694710-CBI", "319800");
nst2priceMap.put("15694710-CBJ", "348800");
nst2priceMap.put("15694710-CBK", "324800");
nst2priceMap.put("25394310-CBB", "393800");
nst2priceMap.put("25394310-CBC", "393800");
nst2priceMap.put("25394310-CBD", "394800");
nst2priceMap.put("25394610-CBD", "441800");
nst2priceMap.put("25394610-CBE", "427800");
nst2priceMap.put("25394610-CBF", "443800");
nst2priceMap.put("25394610-CBG", "429800");
nst2priceMap.put("25394610-CBH", "445000");
nst2priceMap.put("25394910-CBC", "484800");
nst2priceMap.put("25394910-CBD", "574800");
nst2priceMap.put("25394910-CBE", "488800");
nst2priceMap.put("25394910-CBG", "489800");
nst2priceMap.put("25394910-CBH", "576000");
nst2priceMap.put("20514010-CBG", "323800");
nst2priceMap.put("20514010-CBH", "323800");
nst2priceMap.put("20514010-CBK", "323800");
nst2priceMap.put("20514010-CBZ", "310800");
nst2priceMap.put("20514210-CBG", "350800");
nst2priceMap.put("20514210-CBH", "350800");
nst2priceMap.put("20514310-CBG", "396800");
nst2priceMap.put("20514310-CBH", "396800");
nst2priceMap.put("20514310-CBK", "396800");
nst2priceMap.put("20514710-CBC", "593800");
nst2priceMap.put("20514810-CBG", "485000");
nst2priceMap.put("20514810-CBI", "485000");
nst2priceMap.put("20514810-CBJ", "485000");
nst2priceMap.put("20514810-CBK", "485000");
nst2priceMap.put("20514810-CBL", "485000");
nst2priceMap.put("20504210-CBD", "312800");
nst2priceMap.put("20504310-CBD", "386800");
nst2priceMap.put("21314310-CBA", "455800");
nst2priceMap.put("21304210-CBA", "419800");
nst2priceMap.put("15694310-CBE", "267800");
nst2priceMap.put("15694310-CBF", "287800");
nst2priceMap.put("15694310-CBG", "297800");
nst2priceMap.put("15694610-CBG", "394800");
nst2priceMap.put("15694710-CBG", "317800");
nst2priceMap.put("15694710-CBH", "346800");
nst2priceMap.put("25394610-CBC", "425800");
nst2priceMap.put("25394910-CBF", "574800");

//end start price define

CurrencyModel currency = currencyDao.findCurrenciesByCode("CNY").get(0);

for (key in nst2priceMap.keySet()) {
    final DcpVehicleNstModel nstModel = dcpVehicleNstDao.findDcpVehicleNstByCode(key);

    if (nstModel != null) {

        final BigDecimal nstStartPriceBefore = nstModel.getStartPrice().get(0).getPrice();

        final DcpSimplePriceModel price = new DcpSimplePriceModel();
        final List<DcpSimplePriceModel> priceList = new ArrayList<>();

        price.setPrice(new BigDecimal(nst2priceMap.get(key)));
        price.setCurrency(currency);
        priceList.add(price);
        nstModel.setStartPrice(priceList);

        modelService.saveAll();

        final BigDecimal nstStartPriceafter = nstModel.getStartPrice().get(0).getPrice();
        println key + "|" + nstStartPriceBefore + "|" + nstStartPriceafter
    } else {
        println "Can't find nst code"+ key;
        continue
    }



}



